#pragma once

#include <functional>
#include <exception>
#include <string>

namespace thread {
    class thread_exception :
        public virtual std::exception {
    public:
        explicit thread_exception(std::string message) noexcept;

        virtual const char *what() const noexcept override;
    protected:
        std::string message;
    };

    enum class thread_state {
        RUNNING,
        TERMINATED,
        EXITED
    };

    class thread {
    public:
        explicit thread(std::function<int(void*)> action);

        ~thread();

        thread_state get_state();

        void join();

        void kill();
    protected:
        pid_t pid;

        thread_state state;
        int status;
    };
}